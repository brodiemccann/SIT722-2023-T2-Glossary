var express = require('express');
var router = express.Router();

const itemList = [
  { id: 1, term: 'DevOps', definition: 'DevOps applies a set of tools, practices, and cultural philosophies to improve collaboration between development and operations teams within an organisation. Its primary goal is to break down silos between these traditionally separate functions and integrate the work and teams as much as possible to enhance the overall efficiency and effectiveness of the software development process.', references: 'AWS (2023) What is DevOps?, Amazon Web Service Inc., accessed 20 July 2023. https://aws.amazon.com/devops/what-is-devops/ and AXELOS (2015) PRINCE2 Agile®, 1st edn, United Kingdom.' },
  { id: 2, term: 'Waterfall', definition: 'The waterfall methodology uses a sequential or linear approach to software development, with distinct goals for each development phase. In this approach, development phases must be completed before moving onto the next, and previous phases cannot be revisited.', references: 'Sherman R (2015) ‘Project Management’, Business Intelligence Guidebook, pp.449-492. DOI: https://doi.org/10.1016/B978-0-12-411461-6.00018-6 and AXELOS (2018) Managing Successful Projects with PRINCE2, 6th edn, United Kingdom.' },
  { id: 3, term: 'Agile', definition: 'The Agile methodology describes a collection of behaviours, frameworks, concepts, and techniques that combine to support a more iterative, collaborative approach to software development. It emphasises adaptability, customer feedback, and delivering working software in short, incremental cycles (sprints). Scrum and Kanban are examples of specific Agile methods.', references: 'AXELOS (2018) Managing Successful Projects with PRINCE2, 6th edn, United Kingdom.' },
  { id: 4, term: 'Silos', definition: 'Organisational silos refer to the isolation of teams or entire departments from other parts of the business due to a lack of information and knowledge sharing. These barriers contribute to organisational inefficiencies including, duplicate work efforts, poor resource allocation, decreased productivity and ineffective decision-making processes.', references: 'Billingsley S (27 May 2021) Organisational Silos, LinkedIn, accessed 20 July 2021. https://www.linkedin.com/pulse/organizational-silos-scott-billingsley/' },
  { id: 5, term: 'CI/CD', definition: 'CI/CD falls under DevOps and combines the practice of continuous integration and continuous deployment. It applies a continuous and iterative build, test and deploy process through automation to streamline the development process, detect and fix issues early, and deliver software updates more frequently and reliably.', references: 'GitLab (2023) What is CI/CD, GitLab B.V., accessed 20 July 2023. https://about.gitlab.com/topics/ci-cd/' },
  { id: 6, term: 'Microservices', definition: 'Microservices represent an architectural and organisational approach to software development where software is composed of small, independent, and loosely coupled services that can be developed, deployed, and scaled independently. These services are owned by small, self-contained teams and promote agility, flexibility, and technological freedom.', references: 'AWS (2023) Microservices, Amazon Web Service Inc., accessed 20 July 2023. https://aws.amazon.com/microservices/' },
  { id: 7, term: 'Technical Debt', definition: 'Technical debt – or tech debt – refers to the implied costs of businesses taking shortcuts to expedite the delivery of functionality that will have a negative impact on them in the future.  Simply put, it is the result of prioritising delivery speed over perfect implementation (code).', references: 'Lutkevich B (Feb 2023) Technical Debt, TechTarget, accessed 21 July 2023. https://www.techtarget.com/whatis/definition/technical-debt' },
  { id: 8, term: 'Open-Source', definition: 'Open-source software refers to software that is publicly available for use, modification and distribution as users or developers see fit. It is developed and maintained via open collaboration, fostering transparency, customisation, and innovation.', references: 'IBM (n.d.) What isopen source software? [newsletter], IBM, accessed 21 July 2023. https://www.ibm.com/topics/open-source' },
  { id: 9, term: 'COTS', definition: 'In software development, COTS (Commercial Off the Shelf) refer to pre-built software applications or products that are available for sale, lease, or license to the general public. These applications and products are often developed by third-party vendors for organisations to implement or integrate.', references: 'NIST (n.d.) commercial-off-the-shf (COTS), Computer Security Resource Center (CSRS), accessed 21 July 2023. https://csrc.nist.gov/glossary/term/commercial_off_the_shelf' },
  { id: 10, term: 'Tool Ecosystems', definition: 'Tool ecosystems refer to the collection of software tools and technologies that combine to support the various stages of software development. In DevOps tool stacks assist individuals to operate and develop applications quickly. This increases productivity and delivery timeframes while reducing overall costs. ', references: 'Bangbit Technologies (9 Dec 2018) A comprehensive Guide to DevOps & It’s Tools Ecosystem, medium.com, accessed 20 July 2023. https://medium.com/@BangBitTech/a-comprehensive-guide-to-devops-its-tools-ecosystem-83d739cdf543' },
  { id: 11, term: 'MVP', definition: 'A Minimum Viable Product (MVP) is a version of a new product or software application that includes only the most essential features and functionalities necessary to satisfy early users (or customers) and gather feedback. The primary goal of an MVP is to enable quick delivery of a working version of the product to the market, learn from user interactions, and iterate based on real-world feedback.', references: 'Rouse M (14 August 2020) ‘Minimum Viable Product’, techopedia, accessed 5 August 2023. https://www.techopedia.com/definition/27809/minimum-viable-product-mvp' },
  { id: 12, term: 'DoD', definition: 'The Definition of Done (DoD) is a clear and agreed-upon set of acceptance criteria that outlines the specific conditions that must be met for a software product to be considered complete and ready for release. It ensures a shared understanding among the team and stakeholders about the quality and completeness expected.', references: 'Huether D (2023) ‘Definition of Done’, LeadingAgile, accessed 5 August 2023. https://www.leadingagile.com/2017/02/definition-of-done/' },
  { id: 13, term: 'Everything-as-Code', definition: '‘Everything as Code’ is an approach to IT operations and DevOps that uses code to define and manage resources, including infrastructure. It moves away from manual, repetitive tasks to workflows based on end goals and desired states. Code-based configuration files are commonly used to define security requirements for applications and to manage CI/CD processes. ', references: 'Batraski E (14 May 2020) ‘The beginning of ‘Everything as Code’, Ethan Batraski’s Writings, accessed 5 August 2023. https://medium.com/ethanjb/the-beginning-of-everything-as-code-a25c4e9a75e9 ' },
  { id: 14, term: 'ITSM', definition: 'IT Service Management (ITSM) is a set of practices and frameworks that support the efficient management of the end-to-end delivery of IT services to customers. This includes the processes and activities to design, create, deliver, and support IT services. Underpinning ITSM, is the belief that IT should be delivered as a service.', references: 'Atlassian (n.d.) ‘What is IT Service Management (ITSM)?’, Atlassian, accessed 5 August 2023. https://www.atlassian.com/itsm' },
  { id: 15, term: 'Automation', definition: 'Automation refers to the use of technology and processes to perform tasks with minimal human intervention. It aims to streamline repetitive or manual activities by replacing them with automated systems, software, or mechanisms, leading to increased efficiency, consistency, and reduced errors.', references: 'IBM (n.d.) ‘What is automation?’, IBM, accessed 5 August 2023. https://www.ibm.com/topics/automation' },
  { id: 16, term: 'Preprod', definition: 'Preprod or pre-production is designed to simulate the production environment. It serves as a controlled and representative space for testing new features, configurations, and updates to ensure they work as intended, minimize risks, and gather feedback before reaching end-users in the live production setting. It also has the added benefit of scaling while testing. ', references: 'Langshall A (6 September 2016) ‘Oh, the Things Preprod Can Do: Catching More Bugs with a Production-Like Testing Environment’, Lucidchart, accessed 5 August 2023. https://www.lucidchart.com/techblog/2016/09/06/oh-the-things-preprod-can-do-catching-more-bugs-with-a-production-like-testing-environment/' },
  { id: 17, term: 'IaC', definition: 'Infrastructure as Code (IaC) is an approach where infrastructure components, such as servers, networks, and databases, are defined and managed using code and automation tools. This helps to reduce the manual setup process and ensure accuracy and consistency in the management of IT resources.', references: 'RedHat (11 May 2022) ‘What is Infrastructure as Code (IaC)?’, Redhat, accessed 5 August 2023. https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac' },
  { id: 18, term: 'Containers', definition: 'Containers are packages of software that contain all the necessary elements to run in an isolated environment. By virtualising the operating system, they can run from anywhere (private data centre, public cloud, or personal device), providing an efficient way to deploy, run, and manage applications.', references: 'Google Cloud (2023) ‘What are containers?’, Google Cloud, accessed 5 August 2023. https://cloud.google.com/learn/what-are-containers' },
  { id: 19, term: 'Virtual Machine', definition: 'A virtual machine (VM) is a software-based emulation of a physical computer that runs within a host system. One or more virtual “guest” machines can run on a physical “host” machine, with each VM running its own separate operating system and functions. This provides isolation and flexibility for various applications and tasks.', references: 'VMware (n.d.) ‘What is a virtual machine?’, VMware, accessed 5 August 2023. https://www.vmware.com/au/topics/glossary/content/virtual-machine.html' },
  { id: 20, term: 'Repositories', definition: 'A repository, is a centralised digital storage location that developers use to make and manage changes to an application’s source code. A repository has features that allow developers to easily track code changes, simultaneously edit files, and efficiently collaborate on the same project from any location.', references: 'AWS (n.d.) ‘What is Repo?’, Amazon Web Service, accessed 5 August 2023. https://aws.amazon.com/what-is/repo/' },
  { id: 21, term: 'Container Image', definition: 'A container image is a self-contained, standalone package that contains all the necessary components for running an application within an isolated environment. They are comprised of libraries, system tools, configuration files and other settings a software program requires to run on a containerization platform, such as Docker.', references: 'Earls, A. R (n.d.) ‘Container Image’, TechTarget, accessed 19 August 2023. https://www.techtarget.com/searchitoperations/definition/container-image' },
  { id: 22, term: 'Docker', definition: 'Docker is a platform that provides the tools and technology for developing, deploying, and managing applications within containers. It aims to simplify the process of creating, distributing, and running applications by utilising containerization technology.', references: 'Docker (n.d) ‘What is Docker’, docker, accessed 19 August 2023. https://www.docker.com/' },
  { id: 23, term: 'Monolithic Architecture', definition: 'A monolithic architecture is a software design approach where an entire application is built as a single, tightly integrated unit. All components and features of the application are developed, deployed, and managed together within a single codebase. This makes changes and updates restrictive and time-consuming, and contrasts to with the microservices architecture.', references: 'Harris C (n.d.) ‘Microservices vs. monolithic architecture’, Atlassian, accessed 24 August 2023. https://www.atlassian.com/microservices/microservices-architecture/microservices-vs-monolith' },
  { id: 24, term: 'Cloud-Native', definition: 'Cloud native is the software approach to building, deploying, and managing applications in a cloud computing environment. These applications are optimised to take advantage of cloud services and features, allowing them to be more scalable, flexible, resilient, and manageable in cloud environments.', references: 'AWS (n.d.) ‘What Is Cloud Native?’, Amazon Web Service, accessed 24 August 2023. https://aws.amazon.com/what-is/cloud-native/' },
  { id: 25, term: 'Single-Container', definition: 'Single containers, also known as single service applications, are containers that are isolated from the host system and other containers. These have limited functionality and scalability. ', references: 'Hobbs M (2023) ‘Week 5: Multiple Containers and Docker Compose [class slides], Software Deployment and Operations SIT722, Deakin University.' },
  { id: 26, term: 'Multi-Container', definition: 'Multi-container application runs multiple containers simultaneously that work together to form part of a larger application or system.  Each container in a multi-container setup performs a specific role or function, and the containers collectively work together to achieve a broader application goal.', references: 'Hu M (2015) ‘Multi-Container Applications with Docker Compose’, Medium, accessed 26 August 2023. https://medium.com/@xiaominghu19922/multi-container-applications-with-docker-compose-b0c0a4a91f7a ' },
  { id: 27, term: 'YAML', definition: 'YAML (YAML Aint Markup Language) is best known as a data format or configuration language. It is designed to be easy for humans to read and write, while also being easy for machines to parse and generate.', references: 'Davis A (2021) ‘Bootstrapping Microservices with Docker, Kubernetes, and Terraform’, Manning Publications Co, New York. ' },
  { id: 28, term: 'Declarative', definition: 'In the declarative config approach, developers specify an end goal or desired state of the system or application in the configuration files. Declarative configuration therefore describes what the configuration should look like. This approach emphasises the outcome rather than the process.', references: 'Hunter T, Porter S (30 July 2018) ‘Google Cloud Platform for Developers: Build Highly Scalable Cloud Solutions with the Power of Google Cloud Platform’, Pakt Publishing Ltd, United Kingdom. ' },
  { id: 29, term: 'Programmatic', definition: 'In software development programmatic configuration refers to a scripting approach using programmatic languages familiar to developers, i.e., JavaScript, Python, C#, etc. This approach embeds programming structure and logic to support advanced customisation. ', references: 'Hobbs M (2023) Week 4: 4.1 Software and Infrastructure Code [class slides], Software Deployment and Operations SIT722, Deakin University.' },
  { id: 30, term: 'Declarative Management', definition: 'Following the declarative approach, the declarative management tool figures out the steps needed to reach that desired state. This allows developers to focus on stating "what" they want rather than specifying "how" to achieve it.', references: 'Hunter T, Porter S (30 July 2018) ‘Google Cloud Platform for Developers: Build Highly Scalable Cloud Solutions with the Power of Google Cloud Platform’, Pakt Publishing Ltd, United Kingdom. ' },
  { id: 31, term: 'Terraform', definition: 'Terraform is an open-source infrastructure as code (IaC) tool used for provisioning and managing cloud resources and infrastructure. It allows users to define infrastructure components and their configurations in a declarative manner, enabling automated and scalable infrastructure deployment.', references: 'Terraform (n.d.) ‘Deliver infrastructure as code’, HashiCorp, accessed 7 September 2023. https://www.terraform.io/' },
  { id: 32, term: 'Kubernetes', definition: 'Kubernetes, also known as K8s, is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. It provides a framework for efficiently managing and orchestrating container workloads across clusters of servers.', references: 'Kubernetes (12 July 2023) ‘Overview’, kubernetes.io, accessed 7 September 2023. https://kubernetes.io/docs/concepts/overview/' },
  { id: 33, term: 'Bridge Network', definition: 'A bridge network is a type of network configuration used in computer networking to connect and segment different network segments or LANs. It operates at the data link layer (Layer 2) of the OSI model and bridges traffic between two or more network segments, allowing communication between devices on those segments while keeping them logically separated.', references: 'T Nolle (July 2023) ‘What is a bridge?’, TechTarget, accessed 7 September 2023. https://www.techtarget.com/searchsecurity/definition/bridge' },
  { id: 34, term: 'Overlay Network', definition: 'An overlay network is a virtual network created on top of an existing physical network. They decouple network services from the underlying infrastructure by encapsulating network packets inside other packets. It is often used in distributed systems and container orchestration platforms like Kubernetes and Docker Swarm to facilitate communication between containers or nodes regardless of their physical network location.', references: 'J Fruehe (June 2022) ‘overlay network’, Techtarget, accessed 7 September 2023. https://www.techtarget.com/searchnetworking/definition/overlay-network ' },
  { id: 35, term: 'Macvlan Network', definition: 'A MACVLAN network refers to a virtual LAN option that enables the allocation of multiple IP addresses to a single network interface, effectively dividing the interface into distinct sub-interfaces, each with its own unique IP address. These IP addresses can be assigned based on automatically generated MAC addresses. MACVLAN networks are useful for scenarios where you need to run multiple VMs or containers on the same host.', references: 'Ubuntu (13 July 2023) ‘Macvlan network’, ubuntu.com, accessed 7 September 2023. https://documentation.ubuntu.com/lxd/en/stable-5.0/reference/network_macvlan/' },
  { id: 36, term: 'Direct Messaging', definition: 'Direct messaging is a form of whereby two or more individuals or entities communicate directly with each other, typically in a one-to-one or one-to-few manner. It is known when the message has been received as direct messaging usually requires a response or direct action.', references: 'Davis A (2021) ‘Bootstrapping Microservices with Docker, Kubernetes, and Terraform’, Manning Publications Co, New York. ' },
  { id: 37, term: 'Indirect Messaging', definition: 'Indirect messaging, refers to a form of communication where information or messages are relayed or shared through intermediary channels. This allows multiple people to access or receive it, including unintended recipients. Indirect messaging is typically more public and doesn’t allow for direct replies. ', references: 'Davis A (2021) ‘Bootstrapping Microservices with Docker, Kubernetes, and Terraform’, Manning Publications Co, New York. ' },
  { id: 38, term: 'Load Balancing', definition: 'Load balancing is a technique used to distribute incoming network traffic or computational tasks across resources in a way that ensures efficient resource utilisation and prevents overload. The primary goal of load balancing is to improve the availability, reliability, and performance of a system or application.', references: 'AWS (n.d.) ‘What is load balancing?’ Amazon Web Service, accessed 8 September 2023. https://aws.amazon.com/what-is/load-balancing' },
  { id: 39, term: 'HCL', definition: 'Commonly referred to as terraform code, HCL is used to define the configuration of infrastructure components and resources in a human-readable and machine-friendly format. HCL files specify how infrastructure should be configured, what resources should be created, and how they relate to each other, making it an integral part of the infrastructure-as-code (IaC) paradigm.', references: 'HashiCorp (n.d.) ‘Configuration Syntax’, HashiCorp Developer, accessed 8 September 2023. https://developer.hashicorp.com/terraform/language/syntax/configuration' },
  { id: 40, term: 'Container Registry', definition: 'A container registry is a centralised repository used for storing and distributing container images. Container registry’s provide storage, distribution, access control, scalability and version control functionalities. ', references: 'RedHat (27 July 2022) ‘ What is a container registry?’ RedHat, accessed 8 September 2023. https://www.redhat.com/en/topics/cloud-native-apps/what-is-a-container-registry' },
  {id: 41, term: 'Deployment Pipeline', definition: 'A deployment pipeline is a set of automated processes that facilitate code changes to move from the development stage through to production. It ensures that code is consistently built, tested, and released in a streamlined manner, improving deployment frequency and software quality.', references: 'Hall T (n.d.) ‘DevOps Pipeline’, Atlassian, accessed 23 September 2023. https://www.atlassian.com/devops/devops-tools/devops-pipeline'},
  {id: 42, term: 'Bitbucket', definition: 'Bitbucket is a web-based platform that offers version control repository hosting for Git and Mercurial projects. It provides collaboration tools such as pull requests, issue tracking, and continuous integration pipelines, making it a popular choice for teams to manage and track the progress of their codebase.', references: 'Kumar D (7 March 2023) ‘Bitbucket: The Ultimate Platform for Code Collaboration, CI/CD, and Project Management’, Medium, accessed 23 September 2023. https://medium.com/techno-express/bitbucket-the-ultimate-platform-for-code-collaboration-ci-cd-and-project-management-7a75bae8fb67'},
  {id: 43, term: 'Pods', definition: 'In the context of Kubernetes, pods are the smallest and simplest deployable units that can be created and managed. Each pod encapsulates one or more containers, ensuring they share the same network IP, port space, and storage, allowing them to operate in a coordinated manner.', references: 'Kubernetes (24 August 2023) ‘Pods’, Kubernetes.io, accessed 23 September 2023. https://kubernetes.io/docs/concepts/workloads/pods/'},
  {id: 44, term: 'End-to-end Testing', definition: 'End-to-end testing is a methodology that tests the flow of an application from start to finish, ensuring that the entire process of inputs and outputs functions as expected. It simulates real-world user behaviours and validates that the system correctly integrates and operates across all interconnected components.', references: 'Gillis A. S (March 2023) ‘end-to-end testing’, TechTarget, accessed 23 September 2023. techtarget.com/searchsoftwarequality/definition/End-to-end-testing'},
  {id: 45, term: 'Regression Test', definition: 'A regression test ensures that recently introduced changes or updates in the software have not adversely affected existing functionalities. By rerunning previously executed test cases, it validates that the software continues to operate as expected post-change.', references: 'Tricentis (n.d.) ‘Regression testing’, Tricentis, accessed 23 September 2023. https://www.tricentis.com/learn/regression-testing'},
  {id: 46, term: 'Security Test', definition: 'Security testing is a process aimed at discovering vulnerabilities, threats, and risks in a software application to ensure the protection of its data and functionalities from potential malicious attacks. It includes a range of activities, from evaluating data encryption and authentication mechanisms to identifying weaknesses that could be exploited by attackers.', references: 'Pahuja A (21 June 2023) ‘What is Security Testing and Why is it important?’, astra, accessed 23 September 2023. https://www.getastra.com/blog/security-audit/what-is-security-testing/'},
  {id: 47, term: 'Jest', definition: 'Jest is a versatile JavaScript testing framework favoured for its simplicity and efficiency in both configuration and runtime. It offers features like a zero-config setup, snapshot testing, and built-in mocking, making it a comprehensive solution for unit, integration, and end-to-end tests in JavaScript environments.', references: 'Jest (n.d.) ‘Jest: Delightful JavaScript Testing’, jestjs.io, accessed 23 September 2023. https://jestjs.io/'},
  {id: 48, term: 'Integration Testing', definition: 'Integration testing assesses the interactions between different software modules or components to ensure they function cohesively as intended. This testing phase focuses on identifying issues related to data communication, functionality overlaps, or unexpected behaviour in integrated units, bridging the gap between unit tests and system tests.', references: 'Hamilton T (5 August 2023) ‘Integration Testing: What is, Types with Example’, Guru99, accessed 23 September 2023. https://www.guru99.com/integration-testing.html'},
  {id: 49, term: 'Metadata Microservice', definition: 'A metadata microservice is a specialised service focused on managing, storing, and retrieving metadata, required by clients to make decisions. By isolating metadata operations, it ensures efficient, scalable, and organised handling of data descriptors, streamlining their integration and accessibility in larger architectures.', references: 'General Electric (2022) ‘Entity-Metadata Microservice’, GE Digital, Accessed 23 September 2023. https://www.ge.com/digital/documentation/webhmi/r_wh_entity_metadata_microservice.html'},
  {id: 50, term: 'Cypress', definition: 'Cypress is a cutting-edge front-end testing tool designed specifically for the modern web, allowing developers to write unit, integration, and end-to-end tests. It provides an intuitive testing environment with real-time reloads, automatic waiting, and a rich set of debugging tools, enhancing the web development, and testing workflow.', references: 'Cypress (29 August 2023) ‘Why Cypress?’, cypress.io, accessed 23 September 2023. https://docs.cypress.io/guides/overview/why-cypress'},
];


/* GET home page. */
router.get('/', function (req, res, next) {
  res.render('index', { title: 'SIT722 DevOps Glossary', sub: 'This glossary defines confusing terms associated with DevOps.', items: itemList });
});

module.exports = router;
